services:
  core-api:
    build:
      context: .
      dockerfile: ./core-api_app/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - notifications
      - postgres
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 15s
      timeout: 30s
      retries: 1
      start_period: 30s

  notifications:
    build:
      context: .
      dockerfile: ./notifications_app/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - APP_ENV=development
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 15s
      timeout: 30s
      retries: 1
      start_period: 30s

  kafka:
    image: bitnamilegacy/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: mainDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mainDB"]
      interval: 3s
      timeout: 3s
      retries: 10

volumes:
  postgres_data:
  kafka_data:
